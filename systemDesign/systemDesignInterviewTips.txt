Tips to answer design questions:
--------------------------------
Ask clarifying questions to resolve the ambiguity
Breakup down the problem
Dive Deep on implementation
Scaling of the design
 
HLD Expectations:
-----------------
Requirement Gathering and defining system constraints
Identify system components
Associating and coupling Components
Design Considerations like fault tolerance, scalability, concurrency control, etc
Component diagram - Explain responsibility of each component
 
LLD Expectations:
-----------------
Candidate should be comfortable in class diagram and DB table schema implementation
Should know- How should the system handle failures, what can be done to prevent them
Identify Entities, Defining Entities and association
Coupling, Extendibility, and System Maintainability
Touch Base on Design Principles and Design Patterns and OOPS concepts.
 
 
 
KEY POINTS 
----------
Coding questions:
   1. Is the asked problem solved completely?
      a. Is the solution basic or takes care of error handling
      b. How the solution will scale if the input size increases 
      c. Is the code time and space efficient? 
   2. If problem is solved partially then what are the areas remaining and how can a candidate solve?
   
Design questions(LLD):
   1. Is the design capable of solving given problem?
      a. Does it meet functional and non-functional requirements?
   2. What design principles are followed in the proposed design? 
      a. Does the proposed solution by candidate passes SOLID test?
      b. Is there any design pattern that candidate has applied?
      c. How the solution will scale horizontally when traffic/data increases 10x, 50x and 100x?
    3. Ask candidate to implement one key method/function/APIs from his/her design and check the above criteria again.
    4. Is candidate following single responsibility for each class?
    5. How will candidate plan to test the system?
 
 
 
